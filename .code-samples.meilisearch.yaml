# This code-samples file is used by the MeiliSearch documentation
# Every example written here will be automatically fetched by
# the documentation on build
# You can read more on https://github.com/meilisearch/documentation/tree/master/.vuepress/code-samples
---
get_one_index_1: |-
  await client.getIndex('movies');
list_all_indexes_1: |-
  await client.getIndexes();
create_an_index_1: |-
  await client.createIndex('movies', primaryKey: 'movie_id');
update_an_index_1: |-
  await client.index('movies').update(primaryKey: 'movie_review_id');
delete_an_index_1: |-
  await client.index('movies').delete();
get_one_document_1: |-
  await client.index('movies').getDocument(25684);
get_documents_1: |-
  await client.index('movies').getDocuments(limit: 2);
add_or_replace_documents_1: |-
  await client.index('movies').addDocuments([
    {
      'id': 287947,
      'title': 'Shazam',
      'poster':
          'https://image.tmdb.org/t/p/w1280/xnopI5Xtky18MPhK40cZAGAOVeV.jpg',
      'overview':
          'A boy is given the ability to become an adult superhero in times of need with a single magic word.',
      'release_date': '2019-03-23'
    }
  ]);
add_or_update_documents_1: |-
  await client.index('movies').updateDocuments([
    {
      'id': 287947,
      'title': 'Shazam ⚡️',
      'genres': 'comedy'
    }
  ]);
delete_all_documents_1: |-
  await client.index('movies').deleteAllDocuments();
delete_one_document_1: |-
  await client.index('movies').deleteDocument(25684);
delete_documents_1: |-
  await client.index('movies').deleteDocuments([23488, 153738, 437035, 363869]);
search_post_1: |-
  await client.index('movies').search('American ninja');
get_update_1: |-
  await client.index('movies').getUpdateStatus(1);
get_all_updates_1: |-
  await client.index('movies').getAllUpdateStatus();
get_keys_1: |-
  await client.getKeys();
get_settings_1: |-
  await client.index('movies').getSettings();
update_settings_1: |-
  await client.index('movies').updateSettings(IndexSettings(
        rankingRules: [
          'words',
          'typo',
          'proximity',
          'attribute',
          'exactness',
          'release_date:desc',
          'rank:desc'
        ],
        distinctAttribute: 'movie_id',
        searchableAttributes: ['title', 'description', 'genre'],
        displayedAttributes: ['title', 'description', 'genre', 'release_date'],
        stopWords: ['the', 'a', 'an'],
        synonyms: {
          'wolverine': ['xmen', 'logan'],
          'logan': ['wolverine'],
        },
      ));
reset_settings_1: |-
  await client.index('movies').resetSettings();
get_synonyms_1: |-
  await client.index('movies').get_synonyms()
update_synonyms_1: |-
  await client.index('movies').updateSynonyms(
    {
      'wolverine': ['xmen', 'logan'],
      'logan': ['wolverine', 'xmen'],
      'wow': ['world of warcraft']
    }
  );
reset_synonyms_1: |-
  await client.index('movies').resetSynonyms();
get_stop_words_1: |-
  await client.index('movies').getStopWords();
update_stop_words_1: |-
  await client.index('movies').update_stop_words(['of', 'the', 'to']);
reset_stop_words_1: |-
  await client.index('movies').reset_stop_words();
get_ranking_rules_1: |-
  await client.index('movies').get_ranking_rules();
update_ranking_rules_1: |-
  await client.index('movies').update_ranking_rules([
    'words',
    'typo',
    'proximity',
    'attribute',
    'exactness',
    'release_date:asc',
    'rank:desc'
  ]);
reset_ranking_rules_1: |-
  await client.index('movies').resetRankingRules();
get_distinct_attribute_1: |-
  await client.index('movies').getDistinctAttribute();
update_distinct_attribute_1: |-
  await client.index('movies').updateDistinctAttribute('movie_id');
reset_distinct_attribute_1: |-
  await client.index('movies').resetDistinctAttribute();
get_filterable_attributes_1: |-
  await client.index('movies').getFilterableAttributes();
update_filterable_attributes_1: |-
  await client.index('movies').updateFilterableAttributes([
    'genres',
    'director'
  ]);
reset_filterable_attributes_1: |-
  await client.index('movies').resetFilterableAttributes();
get_searchable_attributes_1: |-
  await client.index('movies').getSearchableAttributes();
update_searchable_attributes_1: |-
  await client.index('movies').updateSearchableAttributes([
    'title',
    'description',
    'uid'
  ]);
reset_searchable_attributes_1: |-
  await client.index('movies').resetSearchable_Attributes();
get_displayed_attributes_1: |-
  await client.index('movies').getDisplayedAttributes();
update_displayed_attributes_1: |-
  await client.index('movies').updateDisplayedAttributes([
    'title',
    'description',
    'genre',
    'release_date'
  ]);
reset_displayed_attributes_1: |-
  await client.index('movies').resetDisplayedAttributes();
get_index_stats_1: |-
  await client.index('movies').getStats();
get_indexes_stats_1: |-
  await client.getAllStats();
get_health_1: |-
  await client.health();
get_version_1: |-
  await client.getVersion();
distinct_attribute_guide_1: |-
  await client
      .index('jackets')
      .updateSettings(IndexSettings(distinctAttribute: 'product_id'));
field_properties_guide_searchable_1: |-
  await client.index('movies').updateSettings(
      IndexSettings(searchableAttributes: ['title', 'description', 'genre']));
field_properties_guide_displayed_1: |-
  await client.index('movies').updateSettings(IndexSettings(
      displayedAttributes: ['title', 'description', 'genre', 'release_date']));
filtering_guide_1: |-
  await await client
      .index('movies')
      .search('Avengers', filter: 'release_date > 795484800');
filtering_guide_2: |-
  await client.index('movies').search('Batman',
      filter:
          'release_date > 795484800 AND (director = "Tim Burton" OR director = "Christopher Nolan")');
filtering_guide_3: |-
  await client
      .index('movies')
      .search('horror', filter: 'director = "Jordan Peele"');
filtering_guide_4: |-
  await client.index('movies').search('Planet of the Apes',
      filter: 'rating >= 3 AND (NOT director = "Tim Burton")');
search_parameter_guide_query_1: |-
  await client.index('movies').search('shifu');
search_parameter_guide_offset_1: |-
  await client.index('movies').search('shifu', offset: 1);
search_parameter_guide_limit_1: |-
  await client.index('movies').search('shifu', limit: 2);
search_parameter_guide_retrieve_1: |-
  await client
      .index('movies')
      .search('shifu', attributesToRetrieve: ['overview', 'title']);
search_parameter_guide_crop_1: |-
  await client
      .index('movies')
      .search('shifu', attributesToCrop: ['overview'], cropLength: 10);
search_parameter_guide_highlight_1: |-
  await client
      .index('movies')
      .search('winter feast', attributesToHighlight: ['overview']);
search_parameter_guide_filter_1: |-
  await client.index('movies').search('n', filter: 'title = Nightshift');
search_parameter_guide_filter_2: |-
  await client
      .index('movies')
      .search('shifu', filter: 'title = "Kung Fu Panda"');
search_parameter_guide_matches_1: |-
  await client.index('movies').search('winter feast', matches: true);
settings_guide_synonyms_1: |-
  await client.index('tops').updateSettings(IndexSettings(synonyms: {
        'sweater': ['jumper'],
        'jumper': ['sweater']
      }));
settings_guide_stop_words_1: |-
  await client
      .index('movies')
      .updateSettings(IndexSettings(stopWords: ['the', 'a', 'an']));
settings_guide_ranking_rules_1: |-
  await client.index('movies').updateSettings(IndexSettings(rankingRules: [
        'words',
        'typo',
        'proximity',
        'attribute',
        'exactness',
        'release_date:asc',
        'rank:desc'
      ]));
settings_guide_distinct_1: |-
  await client
      .index('jackets')
      .updateSettings(IndexSettings(distinctAttribute: 'product_id'));
settings_guide_searchable_1: |-
  await client.index('movies').updateSettings(
      IndexSettings(searchableAttributes: ['title', 'description', 'genre']));
settings_guide_displayed_1: |-
  await client.index('movies').updateSettings(IndexSettings(
      displayedAttributes: ['title', 'description', 'genre', 'release_date']));
add_movies_json_1: |-
  import 'dart:io';
  import 'dart:convert';

  final jsonFile = await File('movies.json').readAsString();
  final movies = json.decode(jsonFile);
  await client.index('movies').addDocuments(movies);
documents_guide_add_movie_1: |-
  await client.index('movies').addDocuments([
    {'movie_id': '123sq178', 'title': 'Amélie Poulain'}
  ]);
search_guide_1: |-
  await client.index('movies').search('shifu', limit: 5, offset: 10);
search_guide_2: |-
  await client
      .index('movies')
      .search('Avengers', filter: 'release_date > 795484800');
getting_started_add_documents_md: |-
  ```yaml
  dependencies:
    meilisearch: ^0.3.0
  ```

  ```dart
  import 'package:meilisearch/meilisearch.dart';
  import 'dart:io';
  import 'dart:convert';

  var client = MeiliSearchClient('http://localhost:7700', 'masterKey');

  final jsonFile = await File('movies.json').readAsString();
  final movies = json.decode(jsonFile);
  await client.index('movies').addDocuments(movies);
  ```

  [About this SDK](https://github.com/meilisearch/meilisearch-dart/)
getting_started_search_md: |-
  ```dart
  await client.index('movies').search('botman');
  ```

  [About this SDK](https://github.com/meilisearch/meilisearch-dart/)
faceted_search_update_settings_1: |-
  await client.index('movies').updateFilterableAttributes([
    'director',
    'genres',
  ]);
faceted_search_filter_1: |-
  await client.index('movies').search('thriller', filter: [
    ['genres = Horror', 'genres = Mystery'],
    'director = "Jordan Peele"'
  ]);
faceted_search_facets_distribution_1: |-
  await client.index('movies').search('Batman', facetsDistribution: ['genres']);
faceted_search_walkthrough_filterable_attributes_1: |-
  await client.index('movies').updateFilterableAttributes(
      ['director', 'producer', 'genres', 'production_companies']);
faceted_search_walkthrough_filter_1: |-
  await client.index('movies').search('thriller', filter: [
    ['genres = Horror', 'genres = Mystery'],
    'director = "Jordan Peele"'
  ]);
faceted_search_walkthrough_facets_distribution_1: |-
  await client.index('movies').search('Batman', facetsDistribution: ['genres']);
post_dump_1: |-
  await client.createDump();
get_dump_status_1: |-
  await client.getDumpStatus('20201101-110357260');
phrase_search_1: |-
  await client.index('movies').search('"african american" horror');
sorting_guide_update_sortable_attributes_1: |-
  await client.index('books').updateSortableAttributes(['author', 'price']);
sorting_guide_update_ranking_rules_1: |-
  await client.index('books').updateRankingRules([
    'words',
    'sort',
    'typo',
    'proximity',
    'attribute',
    'exactness'
  ]);
sorting_guide_sort_parameter_1: |-
  await client.index('books').search('science fiction', sort: ['price:asc']);
sorting_guide_sort_parameter_2: |-
  await client.index('books').search('butler', sort: ['author:desc']);
get_sortable_attributes_1: |-
  await client.index('books').sortableAttributes();
update_sortable_attributes_1: |-
  await client.index('books').updateSortableAttributes([
    'price',
    'author'
  ]);
reset_sortable_attributes_1: |-
  await client.index('books').resetSortableAttributes();
search_parameter_guide_sort_1: |-
  await client.index('books').search('science fiction', sort: ['price:asc']);
